/**
 * Templates for complex data models and classes based on the BackboneElement
 * Templates are provided for:
 * - ComplexType - Optional
 * - ComplexType - Required
 * - ComplexType Array - Optional
 * - ComplexType Array - Required
 *
 */

{

//***** region ComplexType - Optional **********************************************************************************

// =====================================================================
// ComplexType 0..1
// XxxxClass (xxxxFieldName / XxxxFieldName)
// XxxxParentClass
// =====================================================================
  private xxxxFieldName?: XxxxClass | undefined;

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): XxxxClass | undefined {

    sourceField = 'XxxxParentClass.xxxxFieldName';
    fieldName = extractFieldName(sourceField);
    if (fieldName in classJsonObj) {
      const datatype: XxxxClass | undefined = parseXxxxClass(classJsonObj[fieldName], sourceField);
      instance.setXxxxFieldName(datatype);
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a XxxxFieldName object
   */
  public getXxxxFieldName(): XxxxClass {
    return this.xxxxFieldName ?? new XxxxClass();
  }

  /**
   * Assigns the provided XxxxFieldName object value to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` object value
   * @returns this
   */
  public setXxxxFieldName(value: XxxxClass | undefined): this {
    const optErrMsg = `Invalid XxxxParentClass.xxxxFieldName; Provided element is not an instance of XxxxClass.`;
    assertFhirType<XxxxClass>(value, XxxxClass, optErrMsg);
    this.xxxxFieldName = value;
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return this.xxxxFieldName !== undefined && !this.xxxxFieldName.isEmpty();
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    if (this.hasXxxxFieldName()) {
      setFhirComplexJson(this.getXxxxFieldName(), 'xxxxFieldName', jsonObj);
    }

  }

//endregion

//***** region ComplexType - Required **********************************************************************************

// =====================================================================
// ComplexType 1..1
// XxxxClass (xxxxFieldNameReq / XxxxFieldNameReq)
// XxxxParentClass
// =====================================================================
  private xxxxFieldNameReq: XxxxClass | null;

  constructor(xxxxFieldNameReq: XxxxClass | null) {

    this.xxxxFieldNameReq = null;
    if (isDefined<XxxxClass | null>(xxxxFieldNameReq)) {
      this.setXxxxFieldNameReq(xxxxFieldNameReq);
    }

  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): XxxxClass | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    sourceField = 'XxxxParentClass.xxxxFieldNameReq';
    fieldName = extractFieldName(sourceField);
    if (fieldName in classJsonObj) {
      const datatype: XxxxClass | undefined = parseXxxxClass(classJsonObj[fieldName], sourceField);
      if (datatype === undefined) {
        missingReqdProperties.push(sourceField);
      } else {
        instance.setXxxxFieldNameReq(datatype);
      }
    } else {
      missingReqdProperties.push(sourceField);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_REQD_IN_JSON} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

  /**
   * @returns the `xxxxFieldNameReq` property value as a XxxxClass object
   */
  public getXxxxFieldNameReq(): XxxxClass | null {
    return this.xxxxFieldNameReq;
  }

  /**
   * Assigns the provided XxxxClass object value to the `xxxxFieldNameReq` property.
   *
   * @param value - the `xxxxFieldNameReq` object value
   * @returns this
   */
  public setXxxxFieldNameReq(value: XxxxClass): this {
    if (isDefined<XxxxClass>(value)) {
      const optErrMsg = `Invalid XxxxParentClass.xxxxFieldNameReq; Provided element is not an instance of XxxxClass.`;
      assertFhirType<XxxxClass>(value, XxxxClass, optErrMsg);
      this.xxxxFieldNameReq = value;
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldNameReq` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameReq(): boolean {
    return isDefined<XxxxClass | null>(this.xxxxFieldNameReq) && !this.xxxxFieldNameReq.isEmpty();
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    if (this.hasXxxxFieldNameReq()) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      setFhirComplexJson(this.getXxxxFieldNameReq()!, 'xxxxFieldNameReq', jsonObj);
    } else {
      missingReqdProperties.push(`XxxxParentClass.xxxxFieldNameReq`);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_DO_NOT_EXIST} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

//endregion

//***** region ComplexType Array - Optional ****************************************************************************

// =====================================================================
// ComplexType 0..*
// XxxxClass[] (xxxxFieldNameArray / XxxxFieldNameArray)
// XxxxParentClass
// =====================================================================
  private xxxxFieldNameArray?: XxxxClass[] | undefined;

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): XxxxClass | undefined {

    sourceField = 'XxxxParentClass.xxxxFieldNameArray';
    fieldName = extractFieldName(sourceField);
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const dataElementJsonArray: JSON.Array = JSON.asArray(classJsonObj[fieldName]!, sourceField);
      dataElementJsonArray.forEach((dataElementJson: JSON.Value, idx) => {
        const datatype: XxxxClass | undefined = parseXxxxClass(dataElementJson, `${sourceField}[${String(idx)}]`);
        instance.addXxxxFieldNameArray(datatype);
      });
    }

  }

  /**
   * @returns the `xxxxFieldNameArray` property value as a XxxxClass array
   */
  public getXxxxFieldNameArray(): XxxxClass[] {
    return this.xxxxFieldNameArray ?? ([] as XxxxClass[]);
  }

  /**
   * Assigns the provided XxxxClass array value to the `xxxxFieldNameArray` property.
   *
   * @param value - the `xxxxFieldNameArray` array value
   * @returns this
   */
  public setXxxxFieldNameArray(value: XxxxClass[] | undefined): this {
    const optErrMsg = `Invalid XxxxParentClass.xxxxFieldNameArray; Provided value array has an element that is not an instance of XxxxClass.`;
    assertFhirTypeList<XxxxClass>(value, XxxxClass, optErrMsg);
    this.xxxxFieldNameArray = value;
    return this;
  }

  /**
   * Add the provided XxxxClass value to the `xxxxFieldNameArray` array property.
   *
   * @param value - the `xxxxFieldNameArray` value
   * @returns this
   */
  public addXxxxFieldNameArray(value: XxxxClass | undefined): this {
    if (isDefined<XxxxClass | undefined>(value)) {
      const optErrMsg = `Invalid XxxxParentClass.xxxxFieldNameArray; Provided element is not an instance of XxxxClass.`;
      assertFhirType<XxxxClass>(value, XxxxClass, optErrMsg);
      this.initXxxxFieldNameArray();
      this.xxxxFieldNameArray?.push(value);
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldNameArray` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameArray(): boolean {
    return (
      this.xxxxFieldNameArray !== undefined &&
      this.xxxxFieldNameArray.length > 0 &&
      this.xxxxFieldNameArray.some((item: XxxxClass) => !item.isEmpty())
    );
  }

  /**
   * Initialize the `xxxxFieldNameArray` property
   */
  private initXxxxFieldNameArray(): void {
    if (this.xxxxFieldNameArray === undefined) {
      this.xxxxFieldNameArray = [] as XxxxClass[];
    }
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    if (this.hasXxxxFieldNameArray()) {
      setFhirComplexListJson(this.getXxxxFieldNameArray(), 'xxxxFieldNameArray', jsonObj);
    }

  }

//endregion

//***** region ComplexType Array - Required ****************************************************************************

// =====================================================================
// ComplexType 1..*
// XxxxClass[] (xxxxFieldNameArrayReq / XxxxFieldNameArrayReq)
// XxxxParentClass
// =====================================================================
  private xxxxFieldNameArrayReq: XxxxClass[] | null;

  constructor(xxxxFieldNameArrayReq: XxxxClass[] | null) {

    this.xxxxFieldNameArrayReq = null;
    if (isDefined<XxxxClass[] | null>(xxxxFieldNameArrayReq)) {
      this.setXxxxFieldNameArrayReq(xxxxFieldNameArrayReq);
    }
  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): XxxxClass | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    sourceField = 'XxxxParentClass.xxxxFieldNameArrayReq';
    fieldName = extractFieldName(sourceField);
    if (fieldName in classJsonObj) {
      const datatype: XxxxClass | undefined = parseXxxxClass(classJsonObj[fieldName], sourceField);
      if (datatype === undefined) {
        missingReqdProperties.push(sourceField);
      } else {
        instance.setXxxxFieldNameArrayReq(datatype);
      }
    } else {
      missingReqdProperties.push(sourceField);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_REQD_IN_JSON} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }


  /**
   * @returns the `xxxxFieldNameArrayReq` property value as a XxxxClass array
   */
  public getXxxxFieldNameArrayReq(): XxxxClass[] | null {
    return this.xxxxFieldNameArrayReq;
  }

  /**
   * Assigns the provided XxxxClass array value to the `xxxxFieldNameArrayReq` property.
   *
   * @param value - the `xxxxFieldNameArrayReq` array value
   * @returns this
   */
  public setXxxxFieldNameArrayReq(value: XxxxClass[]): this {
    if (isDefined<XxxxClass[]>(value)) {
      const optErrMsg = `Invalid XxxxParentClass.xxxxFieldNameArrayReq; Provided value array has an element that is not an instance of XxxxClass.`;
      assertFhirTypeList<XxxxClass>(value, XxxxClass, optErrMsg);
      this.xxxxFieldNameArrayReq = value;
    }
    return this;
  }

  /**
   * Add the provided XxxxClass value to the `xxxxFieldNameArrayReq` array property.
   *
   * @param value - the `xxxxFieldNameArrayReq` value
   * @returns this
   */
  public addXxxxFieldNameArrayReq(value: XxxxClass | undefined): this {
    if (isDefined<XxxxClass | undefined>(value)) {
      const optErrMsg = `Invalid XxxxParentClass.xxxxFieldNameArrayReq; Provided element is not an instance of XxxxClass.`;
      assertFhirType<XxxxClass>(value, XxxxClass, optErrMsg);
      this.initXxxxFieldNameArrayReq();
      this.xxxxFieldNameArrayReq?.push(value);
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldNameArrayReq` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameArrayReq(): boolean {
    return (
      isDefined<XxxxClass[] | null>(this.xxxxFieldNameArrayReq) &&
      this.xxxxFieldNameArrayReq.length > 0 &&
      this.xxxxFieldNameArrayReq.some((item: XxxxClass) => !item.isEmpty())
    );
  }

  /**
   * Initialize the `xxxxFieldNameArrayReq` property
   */
  private initXxxxFieldNameArrayReq(): void {
    if (!this.hasXxxxFieldNameArrayReq()) {
      this.xxxxFieldNameArrayReq = [] as XxxxClass[];
    }
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    if (this.hasXxxxFieldNameArrayReq()) {
      setFhirComplexListJson(this.getXxxxFieldNameArrayReq(), 'xxxxFieldNameArrayReq', jsonObj);
    } else {
      missingReqdProperties.push(`XxxxParentClass.xxxxFieldNameArrayReq`);
    }

     // *** NOTE ***
     // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
     if (missingReqdProperties.length > 0) {
       const errMsg = `${REQUIRED_PROPERTIES_DO_NOT_EXIST} ${missingReqdProperties.join(', ')}`;
       throw new FhirError(errMsg);
     }

  }

//endregion

}
