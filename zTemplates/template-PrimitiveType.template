/**
 * Templates for primitive data models and classes based on the PrimitiveType
 * Templates are provided for:
 * - PrimitiveType - Optional
 * - PrimitiveType - Required
 * - PrimitiveType Array - Optional
 * - PrimitiveType Array - Required
 *
 */

//***** region PrimitiveType - Optional ********************************************************************************

// =====================================================================
// PrimitiveType 0..1
// XxxxPrimitiveType / xxxxPrimitive / xxxxJsonType
//   ex: BooleanType / fhirBoolean   / ( boolean | string | number )
// (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private xxxxFieldName?: XxxxPrimitiveType | undefined;

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): XxxxPrimitiveType | undefined {

    sourceField = 'XxxxParentClassElement.xxxxFieldName';
    fieldName = extractFieldName(sourceField);
    if (fieldName in classJsonObj) {
      const { dtJson, dtSiblingJson } = getPrimitiveTypeJson(classJsonObj, sourceField, fieldName, 'xxxxJsonType');
      const datatype: XxxxPrimitiveType | undefined = parseXxxxPrimitiveType(dtJson, dtSiblingJson);
      instance.setXxxxFieldNameElement(datatype);
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a XxxxPrimitiveType object if defined; else an empty XxxxPrimitiveType object
   */
  public getXxxxFieldNameElement(): XxxxPrimitiveType {
    return this.xxxxFieldName ?? new XxxxPrimitiveType();
  }

  /**
   * Assigns the provided PrimitiveType value to the `xxxxFieldName` property.
   *
   * @param element - the `xxxxFieldName` value
   * @returns this
   */
  public setXxxxFieldNameElement(element: XxxxPrimitiveType | undefined): this {
    if (isDefined<XxxxPrimitiveType>(element)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided element is not an instance of XxxxPrimitiveType.`;
      assertFhirType<XxxxPrimitiveType>(element, XxxxPrimitiveType, optErrMsg);
      this.xxxxFieldName = element;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameElement(): boolean {
    return isDefined<XxxxPrimitiveType>(this.xxxxFieldName) && !this.xxxxFieldName.isEmpty();
  }

  /**
   * @returns the `xxxxFieldName` property value as a xxxxPrimitive if defined; else undefined
   */
  public getXxxxFieldName(): xxxxPrimitive | undefined {
    return this.xxxxFieldName?.getValue();
  }

  /**
   * Assigns the provided primitive value to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` value
   * @returns this
   * @throws PrimitiveTypeError for invalid primitive types
   */
  public setXxxxFieldName(value: xxxxPrimitive | undefined): this {
    if (isDefined<xxxxPrimitive>(value)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName (${String(value)})`;
      this.xxxxFieldName = new XxxxPrimitiveType(parseFhirPrimitiveData(value, xxxxPrimitiveSchema, optErrMsg));
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return this.hasXxxxFieldNameElement();
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    if (this.hasXxxxFieldNameElement()) {
      setFhirPrimitiveJson<xxxxPrimitive>(this.getXxxxFieldNameElement(), 'xxxxFieldName', jsonObj);
    }

  }

//endregion

//***** region PrimitiveType - Required ********************************************************************************

// =====================================================================
// PrimitiveType 1..1
// XxxxPrimitiveType / xxxxPrimitive / xxxxJsonType
//   ex: BooleanType / fhirBoolean   / ( boolean | string | number )
// (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private xxxxFieldName: XxxxPrimitiveType | null;

  constructor(xxxxFieldName: XxxxPrimitiveType | xxxxPrimitive | null) {

    this.xxxxFieldName = null;
    if (isDefined<XxxxPrimitiveType | xxxxPrimitive>(xxxxFieldName)) {
      if (xxxxFieldName instanceof XxxxPrimitiveType) {
        this.setXxxxFieldNameElement(xxxxFieldName);
      } else {
        this.setXxxxFieldName(xxxxFieldName);
      }
    }

  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): XxxxPrimitiveType | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    sourceField = 'XxxxParentClassElement.xxxxFieldName';
    fieldName = extractFieldName(sourceField);
    if (fieldName in classJsonObj) {
      const { dtJson, dtSiblingJson } = getPrimitiveTypeJson(classJsonObj, sourceField, fieldName, 'xxxxJsonType');
      const datatype: XxxxPrimitiveType | undefined = parseXxxxPrimitiveType(dtJson, dtSiblingJson);
      if (datatype === undefined) {
        missingReqdProperties.push(sourceField);
      } else {
        instance.setXxxxFieldNameElement(datatype);
      }
    } else {
      missingReqdProperties.push(sourceField);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_REQD_IN_JSON} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a XxxxPrimitiveType object if defined; else null
   */
  public getXxxxFieldNameElement(): XxxxPrimitiveType | null {
    return this.xxxxFieldName;
  }

  /**
   * Assigns the provided PrimitiveType value to the `xxxxFieldName` property.
   *
   * @param element - the `xxxxFieldName` value
   * @returns this
   */
  public setXxxxFieldNameElement(element: XxxxPrimitiveType): this {
    assertIsDefined<XxxxPrimitiveType>(element, `XxxxParentClassElement.xxxxFieldName is required`);
    const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided value is not an instance of XxxxPrimitiveType.`;
    assertFhirType<XxxxPrimitiveType>(element, XxxxPrimitiveType, optErrMsg);
    this.xxxxFieldName = element;
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameElement(): boolean {
    return isDefined<XxxxPrimitiveType>(this.xxxxFieldName) && !this.xxxxFieldName.isEmpty();
  }

  /**
   * @returns the `xxxxFieldName` property value as a xxxxPrimitive if defined; else null
   */
  public getXxxxFieldName(): xxxxPrimitive | null {
    if (this.xxxxFieldName?.getValue() === undefined) {
      return null;
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    return this.xxxxFieldName.getValue()!;
  }

  /**
   * Assigns the provided primitive value to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` value
   * @returns this
   * @throws PrimitiveTypeError for invalid primitive types
   */
  public setXxxxFieldName(value: xxxxPrimitive): this {
    assertIsDefined<xxxxPrimitive>(value, `XxxxParentClassElement.xxxxFieldName is required`);
    const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName (${String(value)})`;
    this.xxxxFieldName = new XxxxPrimitiveType(parseFhirPrimitiveData(value, xxxxPrimitiveSchema, optErrMsg));
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return this.hasXxxxFieldNameElement();
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    if (this.hasXxxxFieldNameElement()) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      setFhirPrimitiveJson<xxxxPrimitive>(this.getXxxxFieldNameElement()!, 'xxxxFieldName', jsonObj);
    } else {
      missingReqdProperties.push(`XxxxParentClassElement.xxxxFieldName`);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_DO_NOT_EXIST} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

//endregion

//***** region PrimitiveType Array - Optional **************************************************************************

// =====================================================================
// PrimitiveType 0..*
// XxxxPrimitiveType[] / xxxxPrimitive / xxxxJsonType
//   ex: BooleanType[] / fhirBoolean   / ( boolean | string | number )
// (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private xxxxFieldName?: XxxxPrimitiveType[] | undefined;

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): XxxxPrimitiveType | undefined {

    sourceField = 'XxxxParentClassElement.xxxxFieldName';
    fieldName = extractFieldName(sourceField);
    if (fieldName in classJsonObj) {
      const dataJsonArray: PrimitiveTypeJson[] = getPrimitiveTypeListJson(
        classJsonObj,
        sourceField,
        fieldName,
        'xxxxJsonType',
      );
      dataJsonArray.forEach((dataJson: PrimitiveTypeJson) => {
        const datatype: XxxxPrimitiveType | undefined = parseXxxxPrimitiveType(dataJson.dtJson, dataJson.dtSiblingJson);
        if (datatype !== undefined) {
          instance.addXxxxFieldNameElement(datatype);
        }
      });
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a XxxxPrimitiveType array
   */
  public getXxxxFieldNameElement(): XxxxPrimitiveType[] {
    return this.xxxxFieldName ?? ([] as XxxxPrimitiveType[]);
  }

  /**
   * Assigns the provided XxxxPrimitiveType array value to the `xxxxFieldName` property.
   *
   * @param element - the `xxxxFieldName` array value
   * @returns this
   */
  public setXxxxFieldNameElement(element: XxxxPrimitiveType[] | undefined): this {
    if (isDefinedList<XxxxPrimitiveType>(element)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided value array has an element that is not an instance of XxxxPrimitiveType.`;
      assertFhirTypeList<XxxxPrimitiveType>(element, XxxxPrimitiveType, optErrMsg);
      this.xxxxFieldName = element;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * Add the provided XxxxPrimitiveType value to the `xxxxFieldName` array property.
   *
   * @param element - the `xxxxFieldName` value
   * @returns this
   */
  public addXxxxFieldNameElement(element: XxxxPrimitiveType | undefined): this {
    if (isDefined<XxxxPrimitiveType>(element)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided element is not an instance of XxxxPrimitiveType.`;
      assertFhirType<XxxxPrimitiveType>(element, XxxxPrimitiveType, optErrMsg);
      this.initXxxxFieldName();
      this.xxxxFieldName?.push(element);
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameElement(): boolean {
    return isDefinedList<XxxxPrimitiveType>(this.xxxxFieldName) && this.xxxxFieldName.some((item: XxxxPrimitiveType) => !item.isEmpty());
  }

  /**
   * @returns the `xxxxFieldName` property value as a xxxxPrimitive array
   */
  public getXxxxFieldName(): xxxxPrimitive[] {
    this.initXxxxFieldName();
    const xxxxFieldNameValues = [] as xxxxPrimitive[];
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    for (const xxxxFieldName of this.xxxxFieldName!) {
      const value = xxxxFieldName.getValue();
      if (value !== undefined) {
        xxxxFieldNameValues.push(value);
      }
    }
    return xxxxFieldNameValues;
  }

  /**
   * Assigns the provided primitive value array to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` value array
   * @returns this
   * @throws PrimitiveTypeError for invalid primitive types
   */
  public setXxxxFieldName(value: xxxxPrimitive[] | undefined): this {
    if (isDefinedList<xxxxPrimitive>(value)) {
      const xxxxFieldNameElements = [] as XxxxPrimitiveType[];
      for (const xxxxFieldNameValue of value) {
        const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName array item (${String(xxxxFieldNameValue)})`;
        const element = new XxxxPrimitiveType(parseFhirPrimitiveData(xxxxFieldNameValue, xxxxPrimitiveSchema, optErrMsg));
        xxxxFieldNameElements.push(element);
      }
      this.xxxxFieldName = xxxxFieldNameElements;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * Add the provided primitive value to the `xxxxFieldName` array property.
   *
   * @param value - the `xxxxFieldName` value
   * @returns this
   */
  public addXxxxFieldName(value: xxxxPrimitive | undefined): this {
    if (isDefined<xxxxPrimitive>(value)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName array item (${String(value)})`;
      const element = new XxxxPrimitiveType(parseFhirPrimitiveData(value, xxxxPrimitiveSchema, optErrMsg));
      this.addXxxxFieldNameElement(element);
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return this.hasXxxxFieldNameElement();
  }

  /**
   * Initialize the `xxxxFieldName` property
   */
  private initXxxxFieldName(): void {
    if (!this.hasXxxxFieldName()) {
      this.xxxxFieldName = [] as XxxxPrimitiveType[];
    }
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    if (this.hasXxxxFieldName()) {
      setFhirPrimitiveListJson(this.getXxxxFieldNameElement(), 'xxxxFieldName', jsonObj);
    }

  }

//endregion

//***** region PrimitiveType Array - Required **************************************************************************

// =====================================================================
// PrimitiveType 1..*
// XxxxPrimitiveType[] / xxxxPrimitive[] / xxxxJsonType
//   ex: BooleanType[] / fhirBoolean[]   / ( boolean | string | number )
// (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private xxxxFieldName: XxxxPrimitiveType[] | null;

  constructor(xxxxFieldName: XxxxPrimitiveType[] | null) {

    this.xxxxFieldName = null;
    if (isDefinedList<XxxxPrimitiveType | xxxxPrimitive>(xxxxFieldName)) {
      if (xxxxFieldName[0] instanceof XxxxPrimitiveType) {
        this.setXxxxFieldNameElement(xxxxFieldName);
      } else {
        this.setXxxxFieldName(xxxxFieldName);
      }
    }
  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): XxxxPrimitiveType | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    sourceField = 'XxxxParentClassElement.xxxxFieldName';
    fieldName = extractFieldName(sourceField);
    if (fieldName in classJsonObj) {
      const dataJsonArray: PrimitiveTypeJson[] = getPrimitiveTypeListJson(
        classJsonObj,
        sourceField,
        fieldName,
        'xxxxJsonType',
      );
      dataJsonArray.forEach((dataJson: PrimitiveTypeJson, idx) => {
        const datatype: XxxxPrimitiveType | undefined = parseXxxxPrimitiveType(dataJson.dtJson, dataJson.dtSiblingJson);
        if (datatype === undefined) {
          missingReqdProperties.push(`${sourceField}[${String(idx)}]`);
        } else {
          instance.addXxxxFieldNameElement(datatype);
        }
      });
    } else {
      missingReqdProperties.push(sourceField);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_REQD_IN_JSON} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }


  /**
   * @returns the `xxxxFieldName` property value as a XxxxPrimitiveType array
   */
  public getXxxxFieldNameElement(): XxxxPrimitiveType[] {
    return this.xxxxFieldName ?? ([] as XxxxPrimitiveType[]);
  }

  /**
   * Assigns the provided XxxxPrimitiveType array value to the `xxxxFieldName` property.
   *
   * @param element - the `xxxxFieldName` array value
   * @returns this
   */
  public setXxxxFieldNameElement(element: XxxxPrimitiveType[]): this {
    assertIsDefinedList<XxxxPrimitiveType>(element, `XxxxParentClassElement.xxxxFieldName is required`);
    const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided value array has an element that is not an instance of XxxxPrimitiveType.`;
    assertFhirTypeList<XxxxPrimitiveType>(element, XxxxPrimitiveType, optErrMsg);
    this.xxxxFieldName = element;
    return this;
  }

  /**
   * Add the provided XxxxPrimitiveType value to the `xxxxFieldName` array property.
   *
   * @param element - the `xxxxFieldName` value
   * @returns this
   */
  public addXxxxFieldNameElement(element: XxxxPrimitiveType): this {
    if (isDefined<XxxxPrimitiveType>(element)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided element is not an instance of XxxxPrimitiveType.`;
      assertFhirType<XxxxPrimitiveType>(element, XxxxPrimitiveType, optErrMsg);
      this.initXxxxFieldName();
      this.xxxxFieldName?.push(element);
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameElement(): boolean {
    return isDefinedList<XxxxPrimitiveType>(this.xxxxFieldName) && this.xxxxFieldName.some((item: XxxxPrimitiveType) => !item.isEmpty());
  }

  /**
   * @returns the `xxxxFieldName` property value as a xxxxPrimitive array
   */
  public getXxxxFieldName(): xxxxPrimitive[] {
    this.initXxxxFieldName();
    const xxxxFieldNameValues = [] as xxxxPrimitive[];
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    for (const xxxxFieldName of this.xxxxFieldName!) {
      const value = xxxxFieldName.getValue();
      if (value !== undefined) {
        xxxxFieldNameValues.push(value);
      }
    }
    return xxxxFieldNameValues;
  }

  /**
   * Assigns the provided primitive value array to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` value array
   * @returns this
   * @throws PrimitiveTypeError for invalid primitive types
   */
  public setXxxxFieldName(value: xxxxPrimitive[]): this {
    assertIsDefinedList<xxxxPrimitive>(value, `XxxxParentClassElement.xxxxFieldName is required`);
    const xxxxFieldNameElements = [] as XxxxPrimitiveType[];
    for (const xxxxFieldNameValue of value) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName array item (${String(xxxxFieldNameValue)})`;
      const element = new XxxxPrimitiveType(parseFhirPrimitiveData(xxxxFieldNameValue, xxxxPrimitiveSchema, optErrMsg));
      xxxxFieldNameElements.push(element);
    }
    this.xxxxFieldName = xxxxFieldNameElements;
    return this;
  }

  /**
   * Add the provided primitive value to the `xxxxFieldName` array property.
   *
   * @param value - the `xxxxFieldName` value
   * @returns this
   */
  public addXxxxFieldName(value: xxxxPrimitive): this {
    if (isDefined<xxxxPrimitive>(value)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName array item (${String(value)})`;
      const element = new XxxxPrimitiveType(parseFhirPrimitiveData(value, xxxxPrimitiveSchema, optErrMsg));
      this.addXxxxFieldNameElement(element);
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return this.hasXxxxFieldNameElement();
  }

  /**
   * Initialize the `xxxxFieldName` property
   */
  private initXxxxFieldName(): void {
    if (!this.hasXxxxFieldName()) {
      this.xxxxFieldName = [] as XxxxPrimitiveType[];
    }
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    if (this.hasXxxxFieldNameElement()) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      setFhirPrimitiveListJson(this.getXxxxFieldNameElement()!, 'xxxxFieldName', jsonObj);
    } else {
      missingReqdProperties.push(`XxxxParentClassElement.xxxxFieldName`);
    }

     // *** NOTE ***
     // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
     if (missingReqdProperties.length > 0) {
       const errMsg = `${REQUIRED_PROPERTIES_DO_NOT_EXIST} ${missingReqdProperties.join(', ')}`;
       throw new FhirError(errMsg);
     }

  }

//endregion
