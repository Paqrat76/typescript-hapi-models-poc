/**
 * Templates for complex data models and classes based on the EnumCodeType
 * Templates are provided for:
 * - EnumCodeType - Optional
 * - EnumCodeType - Required
 * - EnumCodeType Array - Optional
 * - EnumCodeType Array - Required
 *
 */

//***** region EnumCodeType - Optional ********************************************************************************

// =====================================================================
// EnumCodeType 0..1
// EnumCodeType: xxxxClassEnum / XxxxClassEnum
// (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private readonly xxxxClassEnum: XxxxClassEnum;

  private xxxxFieldName?: EnumCodeType | undefined;

  constructor() {
    super();

    this.xxxxClassEnum = new XxxxClassEnum();

  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): EnumCodeType | undefined {

    sourceField = 'XxxxParentClassElement.xxxxFieldName';
    fieldName = extractFieldName(sourceField);
    if (fieldName in classJsonObj) {
      const { dtJson, dtSiblingJson } = getPrimitiveTypeJson(classJsonObj, sourceField, fieldName, 'string');
      const datatype: CodeType | undefined = parseCodeType(dtJson, dtSiblingJson);
      instance.setXxxxFieldNameElement(datatype);
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a EnumCodeType
   */
  public getXxxxFieldNameEnumType(): EnumCodeType | undefined {
    return this.xxxxFieldName;
  }

  /**
   * Assigns the provided EnumCodeType value to the `xxxxFieldName` property.
   *
   * @param enumType - the `xxxxFieldName` value
   * @returns this
   */
  public setXxxxFieldNameEnumType(enumType: EnumCodeType | undefined): this {
    if (isDefined<EnumCodeType | undefined>(enumType)) {
      const errMsgPrefix = 'Invalid XxxxParentClassElement.xxxxFieldName';
      assertEnumCodeType<XxxxClassEnum>(enumType, XxxxClassEnum, errMsgPrefix);
      this.xxxxFieldName = enumType;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameEnumType(): boolean {
    return this.xxxxFieldName !== undefined && !this.xxxxFieldName.isEmpty() && this.xxxxFieldName.fhirCodeEnumeration.length > 0;
  }

  /**
   * @returns the `xxxxFieldName` property value as a PrimitiveType
   */
  public getXxxxFieldNameElement(): CodeType | undefined {
    if (this.xxxxFieldName === undefined) {
      return undefined;
    }
    return this.xxxxFieldName as CodeType;
  }

  /**
   * Assigns the provided PrimitiveType value to the `xxxxFieldName` property.
   *
   * @param element - the `xxxxFieldName` value
   * @returns this
   */
  public setXxxxFieldNameElement(element: CodeType | undefined): this {
    if (isDefined<CodeType | undefined>(element)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided element is not an instance of CodeType.`;
      assertFhirType<CodeType>(element, CodeType, optErrMsg);
      this.xxxxFieldName = new EnumCodeType(element, this.xxxxClassEnum);
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameElement(): boolean {
    return this.hasXxxxFieldNameEnumType();
  }

  /**
   * @returns the `xxxxFieldName` property value as a primitive value
   */
  public getXxxxFieldName(): fhirCode | undefined {
    if (this.xxxxFieldName === undefined) {
      return undefined;
    }
    return this.xxxxFieldName.fhirCode.code;
  }

  /**
   * Assigns the provided primitive value to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` value
   * @returns this
   */
  public setXxxxFieldName(value: fhirCode | undefined): this {
    if (isDefined<fhirCode | undefined>(value)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided value is not an instance of fhirCode.`;
      this.xxxxFieldName = new EnumCodeType(parseFhirPrimitiveData(value, fhirCodeSchema, optErrMsg), this.xxxxClassEnum);
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return this.hasXxxxFieldNameEnumType();
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    if (this.hasXxxxFieldNameElement()) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      setFhirPrimitiveJson<fhirCode>(this.getXxxxFieldNameElement()!, 'xxxxFieldName', jsonObj);
    }

  }

//endregion

//***** region EnumCodeType - Required ********************************************************************************

// =====================================================================
// EnumCodeType 1..1
// EnumCodeType: xxxxClassEnum / XxxxClassEnum
// (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private readonly xxxxClassEnum: XxxxClassEnum;

  private xxxxFieldName: EnumCodeType | null;

  constructor(xxxxFieldName: EnumCodeType | CodeType | fhirCode | null) {

    this.xxxxClassEnum = new XxxxClassEnum();

    this.xxxxFieldName = constructorCodeValueAsEnumCodeType<XxxxClassEnum>(
      xxxxFieldName,
      XxxxClassEnum,
      this.xxxxClassEnum,
      'XxxxParentClassElement.xxxxFieldName',
    );

  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): EnumCodeType | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    sourceField = 'XxxxParentClassElement.xxxxFieldName';
    fieldName = extractFieldName(sourceField);
    if (fieldName in classJsonObj) {
      const { dtJson, dtSiblingJson } = getPrimitiveTypeJson(classJsonObj, sourceField, fieldName, 'string');
      const datatype: CodeType | undefined = parseCodeType(dtJson, dtSiblingJson);
      if (datatype === undefined) {
        missingReqdProperties.push(sourceField);
      } else {
        instance.setXxxxFieldNameElement(datatype);
      }
    } else {
      missingReqdProperties.push(sourceField);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_REQD_IN_JSON} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a EnumCodeType
   */
  public getXxxxFieldNameEnumType(): EnumCodeType | null {
    return this.xxxxFieldName;
  }

  /**
   * Assigns the provided EnumCodeType value to the `xxxxFieldName` property.
   *
   * @param enumType - the `xxxxFieldName` value
   * @returns this
   */
  public setXxxxFieldNameEnumType(enumType: EnumCodeType): this {
    assertIsDefined<EnumCodeType>(enumType, `XxxxParentClassElement.xxxxFieldName is required`);
    const errMsgPrefix = `Invalid XxxxParentClassElement.xxxxFieldName`;
    assertEnumCodeType<XxxxClassEnum>(enumType, XxxxClassEnum, errMsgPrefix);
    this.xxxxFieldName = enumType;
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameEnumType(): boolean {
    return isDefined<EnumCodeType | null>(this.xxxxFieldName) && !this.xxxxFieldName.isEmpty() && this.xxxxFieldName.fhirCodeEnumeration.length > 0;
  }

  /**
   * @returns the `xxxxFieldName` property value as a PrimitiveType
   */
  public getXxxxFieldNameElement(): CodeType | null {
    if (this.xxxxFieldName === null) {
      return null;
    }
    return this.xxxxFieldName as CodeType;
  }

  /**
   * Assigns the provided PrimitiveType value to the `xxxxFieldName` property.
   *
   * @param element - the `xxxxFieldName` value
   * @returns this
   */
  public setXxxxFieldNameElement(element: CodeType): this {
    assertIsDefined<CodeType>(element, `XxxxParentClassElement.xxxxFieldName is required`);
    const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided value is not an instance of CodeType.`;
    assertFhirType<CodeType>(element, CodeType, optErrMsg);
    this.xxxxFieldName = new EnumCodeType(element, this.xxxxClassEnum);
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameElement(): boolean {
    return this.hasXxxxFieldNameEnumType();
  }

  /**
   * @returns the `xxxxFieldName` property value as a primitive value
   */
  public getXxxxFieldName(): fhirCode | null {
    if (this.xxxxFieldName === null) {
      return null;
    }
    return this.xxxxFieldName.fhirCode.code;
  }

  /**
   * Assigns the provided primitive value to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` value
   * @returns this
   */
  public setXxxxFieldName(value: fhirCode): this {
    assertIsDefined<fhirCode>(value, `XxxxParentClassElement.xxxxFieldName is required`);
    const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName (${String(value)})`;
    this.xxxxFieldName = new EnumCodeType(parseFhirPrimitiveData(value, fhirCodeSchema, optErrMsg), this.xxxxClassEnum);
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return this.hasXxxxFieldNameEnumType();
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    if (this.hasXxxxFieldNameElement()) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      setFhirPrimitiveJson<fhirCode>(this.getXxxxFieldNameElement()!, 'xxxxFieldName', jsonObj);
    } else {
      missingReqdProperties.push(`XxxxParentClassElement.xxxxFieldName`);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_DO_NOT_EXIST} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

//endregion

//***** region EnumCodeType Array - Optional **************************************************************************

// =====================================================================
// EnumCodeType 0..*
// EnumCodeType[]: xxxxClassEnum / XxxxClassEnum
// (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private readonly xxxxClassEnum: XxxxClassEnum;

  private xxxxFieldName?: EnumCodeType[] | undefined;

  constructor() {
    super();

    this.xxxxClassEnum = new XxxxClassEnum();

  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): EnumCodeType | undefined {

    sourceField = 'XxxxParentClassElement.xxxxFieldName';
    fieldName = extractFieldName(sourceField);
    if (fieldName in classJsonObj) {
      const dataJsonArray: PrimitiveTypeJson[] = getPrimitiveTypeListJson(
        classJsonObj,
        sourceField,
        fieldName,
        'string',
      );
      dataJsonArray.forEach((dataJson: PrimitiveTypeJson) => {
        const datatype: CodeType | undefined = parseCodeType(dataJson.dtJson, dataJson.dtSiblingJson);
        instance.addXxxxFieldNameElement(datatype);
      });
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a EnumCodeType array
   */
  public getXxxxFieldNameEnumType(): EnumCodeType[] {
    return this.xxxxFieldName ?? ([] as EnumCodeType[]);
  }

  /**
   * Assigns the provided EnumCodeType array value to the `xxxxFieldName` property.
   *
   * @param enumType - the `xxxxFieldName` array value
   * @returns this
   */
  public setXxxxFieldNameEnumType(enumType: EnumCodeType[] | undefined): this {
    if (isDefined<EnumCodeType[] | undefined>(enumType)) {
      const errMsgPrefix = `Invalid XxxxParentClassElement.xxxxFieldName`;
      assertEnumCodeTypeList<XxxxClassEnum>(enumType, XxxxClassEnum, errMsgPrefix);
      this.xxxxFieldName = enumType;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * Add the provided EnumCodeType value to the `xxxxFieldName` array property.
   *
   * @param enumType - the `xxxxFieldName` value
   * @returns this
   */
  public addXxxxFieldNameEnumType(enumType: EnumCodeType | undefined): this {
    if (isDefined<EnumCodeType | undefined>(enumType)) {
      const errMsgPrefix = `Invalid XxxxParentClassElement.xxxxFieldName)`;
      assertEnumCodeType<XxxxClassEnum>(enumType, XxxxClassEnum, errMsgPrefix);
      this.initXxxxFieldName();
      this.xxxxFieldName?.push(enumType);
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameEnumType(): boolean {
    return this.xxxxFieldName !== undefined && this.xxxxFieldName.length > 0 && this.xxxxFieldName.some((item: EnumCodeType) => !item.isEmpty()) && this.xxxxFieldName.every((item: EnumCodeType) => item.fhirCodeEnumeration.length > 0);
  }

  /**
   * @returns the `xxxxFieldName` property value as a PrimitiveType array
   */
  public getXxxxFieldNameElement(): CodeType[] {
    if (this.xxxxFieldName === undefined) {
      return [] as CodeType[];
    }
    return this.xxxxFieldName as CodeType[];
  }

  /**
   * Assigns the provided PrimitiveType array value to the `xxxxFieldName` property.
   *
   * @param element - the `xxxxFieldName` array value
   * @returns this
   */
  public setXxxxFieldNameElement(element: CodeType[] | undefined): this {
    if (isDefined<CodeType[] | undefined>(element)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided element array has an element that is not an instance of CodeType.`;
      assertFhirTypeList<CodeType>(element, CodeType, optErrMsg);
      const enumCodeTypes = [] as EnumCodeType[];
      elements.forEach((type: CodeType) => {
        enumCodeTypes.push(new EnumCodeType(type, this.xxxxClassEnum));
      });
      this.xxxxFieldName = enumCodeTypes;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * Add the provided PrimitiveType value to the `xxxxFieldName` array property.
   *
   * @param element - the `xxxxFieldName` value
   * @returns this
   */
  public addXxxxFieldNameElement(element: CodeType | undefined): this {
    if (isDefined<CodeType | undefined>(element)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided element is not an instance of CodeType.`;
      assertFhirType<CodeType>(element, CodeType, optErrMsg);
      this.initXxxxFieldName();
      this.xxxxFieldName?.push(new EnumCodeType(element, this.xxxxClassEnum));
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldNameElement(): boolean {
    return this.hasXxxxFieldNameEnumType();
  }

  /**
   * @returns the `xxxxFieldName` property value as a primitive value array
   */
  public getXxxxFieldName(): fhirCode[] {
    if (this.xxxxFieldName === undefined) {
      return [] as fhirCode[];
    }
    const values = [] as fhirCode[];
    for (const item of this.xxxxFieldName) {
      values.push(item.fhirCode.code);
    }
    return values;
  }

  /**
   * Assigns the provided primitive value array to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` value array
   * @returns this
   * @throws PrimitiveTypeError for invalid primitive types
   */
  public setXxxxFieldName(value: fhirCode[] | undefined): this {
    if (isDefined<fhirCode[] | undefined>(value)) {
      const enumCodeTypes = [] as EnumCodeType[];
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided value is not an instance of fhirCode.`;
      values.forEach((value: fhirCode) => {
        enumCodeTypes.push(new EnumCodeType(parseFhirPrimitiveData(value, fhirCodeSchema, optErrMsg), this.xxxxClassEnum));
      });
      this.xxxxFieldName = enumCodeTypes;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * Add the provided primitive value to the `xxxxFieldName` array property.
   *
   * @param value - the `xxxxFieldName` value
   * @returns this
   */
  public addXxxxFieldName(value: fhirCode | undefined): this {
    if (isDefined<fhirCode | undefined>(value)) {
      this.initXxxxFieldName();
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided value is not an instance of fhirCode.`;
      this.xxxxFieldName?.push(new EnumCodeType(parseFhirPrimitiveData(value, fhirCodeSchema, optErrMsg), this.xxxxClassEnum));
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return this.hasXxxxFieldNameEnumType();
  }

  /**
   * Initialize the xxxxFieldName property
   */
  private initXxxxFieldName(): void {
    if (this.xxxxFieldName === undefined) {
      this.xxxxFieldName = [] as EnumCodeType[];
    }
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    if (this.hasXxxxFieldNameElement()) {
      setFhirPrimitiveListJson<fhirCode>(this.getXxxxFieldNameElement(), 'xxxxFieldName', jsonObj);
    }

  }

//endregion

//***** region EnumCodeType Array - Required **************************************************************************

// =====================================================================
// EnumCodeType 1..*
// EnumCodeType[]: xxxxClassEnum / XxxxClassEnum
// (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private xxxxFieldName: EnumCodeType[] | null;

  private readonly xxxxClassEnum: XxxxClassEnum;

  constructor(xxxxFieldName: EnumCodeType[] | CodeType[] | fhirCode[] | null) {

    this.xxxxClassEnum = new XxxxClassEnum();

    this.xxxxFieldName = constructorCodeValueAsEnumCodeTypeList<XxxxClassEnum>(
      xxxxFieldName,
      XxxxClassEnum,
      this.xxxxClassEnum,
      'XxxxParentClassElement.xxxxFieldName',
    );

  }

  // TODO: Fill out if/when needed

//endregion
