/**
 * Templates for data models and classes based on the Reference data type
 * Templates are provided for:
 * - Reference Type - Optional
 * - Reference Type - Required
 * - Reference Type Array - Optional
 * - Reference Type Array - Required
 *
 */

//***** region Reference Type - Optional **********************************************************************************

// =====================================================================
// Reference Type 0..1
// Reference (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// XxxxReferenceTypeList (e.g., ['Organization', 'Practitioner'])
// =====================================================================
  private xxxxFieldName?: Reference | undefined;

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): Reference | undefined {

    fieldName = 'xxxxFieldName';
    sourceField = `${source}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const datatype: Reference | undefined = Reference.parse(classJsonObj[fieldName]!, sourceField);
      instance.setXxxxFieldName(datatype);
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a Reference object; else an empty Reference object
   */
  public getXxxxFieldName(): Reference {
    return this.xxxxFieldName ?? new Reference();
  }

  /**
   * Assigns the provided XxxxFieldName object value to the `xxxxFieldName` property.
   *
   * @decorator `@ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)`
   *
   * @param value - the `xxxxFieldName` object value
   * @returns this
   */
  @ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)
  public setXxxxFieldName(value: Reference | undefined): this {
    if (isDefined<Reference>(value)) {
      // assertFhirType<Reference>(value, Reference) unnecessary because @ReferenceTargets decorator ensures proper type/value
      this.xxxxFieldName = value;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return isDefined<Reference>(this.xxxxFieldName) && !this.xxxxFieldName.isEmpty();
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    if (this.hasXxxxFieldName()) {
      setFhirComplexJson(this.getXxxxFieldName(), 'xxxxFieldName', jsonObj);
    }

  }

//endregion

//***** region Reference Type - Required **********************************************************************************

// =====================================================================
// Reference Type 1..1
// Reference (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// XxxxReferenceTypeList (e.g., ['Organization', 'Practitioner'])
// =====================================================================
  private xxxxFieldName: Reference | null;

  constructor(xxxxFieldName: Reference | null) {

    this.xxxxFieldName = null;
    if (isDefined<Reference>(xxxxFieldName)) {
      this.setXxxxFieldName(xxxxFieldName);
    }

  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): Reference | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    fieldName = 'xxxxFieldName';
    sourceField = `${source}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const datatype: Reference | undefined = Reference.parse(classJsonObj[fieldName]!, sourceField);
      if (datatype === undefined) {
        missingReqdProperties.push(sourceField);
      } else {
        instance.setXxxxFieldName(datatype);
      }
    } else {
      missingReqdProperties.push(sourceField);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_REQD_IN_JSON} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a Reference object if defined; else null
   */
  public getXxxxFieldName(): Reference | null {
    return this.xxxxFieldName;
  }

  /**
   * Assigns the provided XxxxFieldName object value to the `xxxxFieldName` property.
   *
   * @decorator `@ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)`
   *
   * @param value - the `xxxxFieldName` object value
   * @returns this
   */
  @ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)
  public setXxxxFieldName(value: Reference): this {
    assertIsDefined<Reference>(value, `XxxxParentClassElement.xxxxFieldName is required`);
    // assertFhirType<Reference>(value, Reference) unnecessary because @ReferenceTargets decorator ensures proper type/value
    this.xxxxFieldName = value;
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return isDefined<Reference>(this.xxxxFieldName) && !this.xxxxFieldName.isEmpty();
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    if (this.hasXxxxFieldName()) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      setFhirComplexJson(this.getXxxxFieldName()!, 'xxxxFieldName', jsonObj);
    } else {
      missingReqdProperties.push(`XxxxParentClassElement.xxxxFieldName`);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_DO_NOT_EXIST} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

//endregion

//***** region Reference Type Array - Optional ****************************************************************************

// =====================================================================
// Reference Type 0..*
// Reference[] (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// XxxxReferenceTypeList (e.g., ['Organization', 'Practitioner'])
// =====================================================================
  private xxxxFieldName?: Reference[] | undefined;

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): Reference | undefined {

    fieldName = 'xxxxFieldName';
    sourceField = `${source}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const dataElementJsonArray: JSON.Array = JSON.asArray(classJsonObj[fieldName]!, sourceField);
      dataElementJsonArray.forEach((dataElementJson: JSON.Value, idx) => {
        const datatype: Reference | undefined = Reference.parse(dataElementJson, `${sourceField}[${String(idx)}]`);
        if (datatype !== undefined) {
          instance.addXxxxFieldName(datatype);
        }
      });
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a Reference array
   */
  public getXxxxFieldName(): Reference[] {
    return this.xxxxFieldName ?? ([] as Reference[]);
  }

  /**
   * Assigns the provided Reference array value to the `xxxxFieldName` property.
   *
   * @decorator `@ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)`
   *
   * @param value - the `xxxxFieldName` array value
   * @returns this
   */
  @ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)
  public setXxxxFieldName(value: Reference[] | undefined): this {
    if (isDefinedList<Reference>(value)) {
      // assertFhirTypeList<Reference>(value, Reference) unnecessary because @ReferenceTargets decorator ensures proper type/value
      this.xxxxFieldName = value;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * Add the provided Reference value to the `xxxxFieldName` array property.
   *
   * @decorator `@ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)`
   *
   * @param value - the `xxxxFieldName` value
   * @returns this
   */
  @ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)
  public addXxxxFieldName(value: Reference | undefined): this {
    if (isDefined<Reference>(value)) {
      // assertFhirType<Reference>(value, Reference) unnecessary because @ReferenceTargets decorator ensures proper type/value
      this.initXxxxFieldName();
      this.xxxxFieldName?.push(value);
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return isDefinedList<Reference>(this.xxxxFieldName) && this.xxxxFieldName.some((item: Reference) => !item.isEmpty());
  }

  /**
   * Initialize the `xxxxFieldName` property
   */
  private initXxxxFieldName(): void {
    if (!this.hasXxxxFieldName()) {
      this.xxxxFieldName = [] as Reference[];
    }
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    if (this.hasXxxxFieldName()) {
      setFhirComplexListJson(this.getXxxxFieldName(), 'xxxxFieldName', jsonObj);
    }

  }

//endregion

//***** region Reference Type Array - Required ****************************************************************************

// =====================================================================
// Reference Type 1..*
// Reference[] (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// XxxxReferenceTypeList (e.g., ['Organization', 'Practitioner'])
// =====================================================================
  private xxxxFieldName: Reference[] | null;

  constructor(xxxxFieldName: Reference[] | null) {

    this.xxxxFieldName = null;
    if (isDefinedList<Reference>(xxxxFieldName)) {
      this.setXxxxFieldName(xxxxFieldName);
    }
  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): Reference | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    fieldName = 'xxxxFieldName';
    sourceField = `${source}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const dataElementJsonArray: JSON.Array = JSON.asArray(classJsonObj[fieldName]!, sourceField);
      dataElementJsonArray.forEach((dataElementJson: JSON.Value, idx) => {
        const datatype: Reference | undefined = Reference.parse(dataElementJson, `${sourceField}[${String(idx)}]`);
        if (datatype === undefined) {
          missingReqdProperties.push(`${sourceField}[${String(idx)}]`);
        } else {
          instance.addXxxxFieldName(datatype);
        }
      });
    } else {
      missingReqdProperties.push(sourceField);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_REQD_IN_JSON} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }


  /**
   * @returns the `xxxxFieldName` property value as a Reference array
   */
  public getXxxxFieldName(): Reference[] {
    return this.xxxxFieldName ?? ([] as Reference[]);
  }

  /**
   * Assigns the provided Reference array value to the `xxxxFieldName` property.
   *
   * @decorator `@ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)`
   *
   * @param value - the `xxxxFieldName` array value
   * @returns this
   */
  @ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)
  public setXxxxFieldName(value: Reference[]): this {
    assertIsDefinedList<Reference>(value, `XxxxParentClassElement.xxxxFieldName is required`);
    // assertFhirTypeList<Reference>(value, Reference) unnecessary because @ReferenceTargets decorator ensures proper type/value
    this.xxxxFieldName = value;
    return this;
  }

  /**
   * Add the provided Reference value to the `xxxxFieldName` array property.
   *
   * @decorator `@ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)`
   *
   * @param value - the `xxxxFieldName` value
   * @returns this
   */
  @ReferenceTargets('XxxxParentClassElement.xxxxFieldName', XxxxReferenceTypeList)
  public addXxxxFieldName(value: Reference | undefined): this {
    if (isDefined<Reference>(value)) {
      // assertFhirType<Reference>(value, Reference) unnecessary because @ReferenceTargets decorator ensures proper type/value
      this.initXxxxFieldName();
      this.xxxxFieldName?.push(value);
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return isDefinedList<Reference>(this.xxxxFieldName) && this.xxxxFieldName.some((item: Reference) => !item.isEmpty());
  }

  /**
   * Initialize the `xxxxFieldName` property
   */
  private initXxxxFieldName(): void {
    if (!this.hasXxxxFieldName()) {
      this.xxxxFieldName = [] as Reference[];
    }
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    if (this.hasXxxxFieldName()) {
      setFhirComplexListJson(this.getXxxxFieldName(), 'xxxxFieldName', jsonObj);
    } else {
      missingReqdProperties.push(`XxxxParentClassElement.xxxxFieldName`);
    }

     // *** NOTE ***
     // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
     if (missingReqdProperties.length > 0) {
       const errMsg = `${REQUIRED_PROPERTIES_DO_NOT_EXIST} ${missingReqdProperties.join(', ')}`;
       throw new FhirError(errMsg);
     }

  }

//endregion
