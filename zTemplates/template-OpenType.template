/**
 * Templates for open data models and classes based on the DataType
 * Templates are provided for:
 * - Open Type - Optional
 * - Open Type - Required
 *
 * NOTE:
 *   Elements that have an open of data type cannot repeat - they must have a maximum cardinality of 1.
 *   When constructing an instance of an element with an open type, the authoring system must create
 *   a single element with a data type chosen from among the list of permitted data types.
 *
 * @see [Open Type Element](https://hl7.org/fhir/R4/datatypes.html#open)
 */

//***** region Open Type - Optional **********************************************************************************

// =====================================================================
// Open Type 0..1
// DataType (xxxxFieldName / XxxxFieldName)
// XxxxParentClassName / XxxxParentClassElement
//   e.g., GroupCharacteristicComponent / 'Group.characteristic'
// =====================================================================
  /**
   * XxxxParentClassElement.xxxxFieldName[x] Element
   *
   * @decorator `@OpenDataTypesMeta('XxxxParentClassElement.xxxxFieldName[x]')`
   *
   * @remarks
   * **FHIR Specification**
   * ...
   */
  @OpenDataTypesMeta('XxxxParentClassElement.xxxxFieldName[x]')
  private xxxxFieldName?: DataType | undefined;

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): DataType | undefined {

    // NOTE: Added IF and ONLY IF an open data type is used
    const classMetadata: DecoratorMetadataObject | null = XxxxParentClassName[Symbol.metadata];
    const errorMessage = `DecoratorMetadataObject does not exist for XxxxParentClassName`;
    assertIsDefined<DecoratorMetadataObject>(classMetadata, errorMessage);


    fieldName = 'xxxxFieldName[x]';
    sourceField = `${source}.${fieldName}`;
    const xxxxFieldName: DataType | undefined = parseOpenDataType(classJsonObj, sourceField, fieldName, classMetadata);
    instance.setXxxxFieldName(xxxxFieldName);

  }

  /**
   * @returns the `xxxxFieldName` property value as a DataType object if defined; else undefined
   */
  public getXxxxFieldName(): DataType | undefined {
    return this.xxxxFieldName;
  }

  /**
   * Assigns the provided DataType object value to the `xxxxFieldName` property.
   *
   * @decorator `@OpenDataTypes('XxxxParentClassElement.xxxxFieldName[x]')`
   *
   * @param value - the `xxxxFieldName` object value
   * @returns this
   */
  @OpenDataTypes('XxxxParentClassElement.xxxxFieldName[x]')
  public setXxxxFieldName(value: DataType | undefined): this {
    if (isDefined<DataType>(value)) {
      // assertFhirType<DataType>(value, DataType) unnecessary because @OpenDataTypes decorator ensures proper type/value
      this.xxxxFieldName = value;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return isDefined<DataType>(this.xxxxFieldName) && !this.xxxxFieldName.isEmpty();
  }


  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    if (this.hasXxxxFieldName()) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      setPolymorphicValueJson(this.getXxxxFieldName()!, 'xxxxFieldName', jsonObj);
    }

  }

//endregion

//***** region Open Type - Required **********************************************************************************

// =====================================================================
// Open Type 1..1
// DataType (xxxxFieldName / XxxxFieldName)
// XxxxParentClassName / XxxxParentClassElement
//   e.g., GroupCharacteristicComponent / 'Group.characteristic'
// =====================================================================
  /**
   * XxxxParentClassElement.xxxxFieldName[x] Element
   *
   * @decorator `@OpenDataTypesMeta('XxxxParentClassElement.xxxxFieldName[x]')`
   *
   * @remarks
   * **FHIR Specification**
   * ...
   */
  @OpenDataTypesMeta('XxxxParentClassElement.xxxxFieldName[x]')
  private xxxxFieldName: DataType | null;

  constructor(xxxxFieldName: DataType | null) {

    this.xxxxFieldName = null;
    if (isDefined<DataType>(xxxxFieldName)) {
      this.setXxxxFieldName(xxxxFieldName);
    }

  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Object): DataType | undefined {

    // NOTE: Added IF and ONLY IF an open data type is used
    const classMetadata: DecoratorMetadataObject | null = XxxxParentClassName[Symbol.metadata];
    const errorMessage = `DecoratorMetadataObject does not exist for XxxxParentClassName`;
    assertIsDefined<DecoratorMetadataObject>(classMetadata, errorMessage);

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];


    fieldName = 'xxxxFieldName[x]';
    sourceField = `${source}.${fieldName}`;
    const xxxxFieldName: DataType | undefined = parseOpenDataType(classJsonObj, sourceField, fieldName, classMetadata);
    if (xxxxFieldName === undefined) {
      missingReqdProperties.push(sourceField);
    } else {
      instance.setXxxxFieldName(xxxxFieldName);
    }


    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_REQD_IN_JSON} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a DataType object; else null
   */
  public getXxxxFieldName(): DataType | null {
    return this.xxxxFieldName;
  }

  /**
   * Assigns the provided DataType object value to the `xxxxFieldName` property.
   *
   * @decorator `@OpenDataTypes('XxxxParentClassElement.xxxxFieldName[x]')`
   *
   * @param value - the `xxxxFieldName` object value
   * @returns this
   */
  @OpenDataTypes('XxxxParentClassElement.xxxxFieldName[x]')
  public setXxxxFieldName(value: DataType): this {
    assertIsDefined<DataType>(value, `XxxxParentClassElement.xxxxFieldName[x] is required`);
    // assertFhirType<DataType>(value, DataType) unnecessary because @OpenDataTypes decorator ensures proper type/value
    this.xxxxFieldName = value;
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return isDefined<DataType>(this.xxxxFieldName) && !this.xxxxFieldName.isEmpty();
  }


  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    if (this.hasXxxxFieldName()) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      setPolymorphicValueJson(this.getXxxxFieldName()!, 'xxxxFieldName', jsonObj);
    } else {
      missingReqdProperties.push(`XxxxParentClassElement.xxxxFieldName[x]`);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_DO_NOT_EXIST} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

//endregion
