/**
 * Templates for complex data models and classes based on the BackboneElement
 * Templates are provided for:
 * - BackboneElementType - Optional
 * - BackboneElementType - Required
 * - BackboneElementType Array - Optional
 * - BackboneElementType Array - Required
 *
 */


//***** region BackboneElementType - Optional **************************************************************************

// =====================================================================
// BackboneElementType 0..1
// XxxxClass (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private xxxxFieldName?: XxxxClass | undefined;

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Value): XxxxClass | undefined {

    fieldName = 'xxxxFieldName';
    sourceField = `${source}.${fieldName}`;
    if (fieldName in classJsonObj) {
      const datatype: XxxxClass | undefined = XxxxClass.parse(
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        classJsonObj[fieldName]!,
        sourceField,
      );
      instance.setXxxxFieldName(datatype);
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a XxxxClass object if defined; else an empty XxxxClass object
   */
  public getXxxxFieldName(): XxxxClass {
    return this.xxxxFieldName ?? new XxxxClass();
  }

  /**
   * Assigns the provided XxxxFieldName object value to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` object value
   * @returns this
   */
  public setXxxxFieldName(value: XxxxClass | undefined): this {
    if (isDefined<XxxxClass>(value)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided element is not an instance of XxxxClass.`;
      assertFhirType<XxxxClass>(value, XxxxClass, optErrMsg);
      this.xxxxFieldName = value;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return isDefined<XxxxClass>(this.xxxxFieldName) && !this.xxxxFieldName.isEmpty();
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    if (this.hasXxxxFieldName()) {
      setFhirBackboneElementJson(this.getXxxxFieldName(), 'xxxxFieldName', jsonObj);
    }

  }

//endregion

//***** region BackboneElementType - Required **************************************************************************

// =====================================================================
// BackboneElementType 1..1
// XxxxClass (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private xxxxFieldName: XxxxClass | null;

  constructor(xxxxFieldName: XxxxClass | null) {

    this.xxxxFieldName = null;
    if (isDefined<XxxxClass>(xxxxFieldName)) {
      this.setXxxxFieldName(xxxxFieldName);
    }

  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Value): XxxxClass | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    fieldName = 'xxxxFieldName';
    sourceField = `${source}.${fieldName}`;
    if (fieldName in classJsonObj) {
      const datatype: XxxxClass | undefined = XxxxClass.parse(
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        classJsonObj[fieldName]!,
        sourceField,
      );
      if (datatype === undefined) {
        missingReqdProperties.push(sourceField);
      } else {
        instance.setXxxxFieldName(datatype);
      }
    } else {
      missingReqdProperties.push(sourceField);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_REQD_IN_JSON} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a XxxxClass object if defined; else null
   */
  public getXxxxFieldName(): XxxxClass | null {
    return this.xxxxFieldName;
  }

  /**
   * Assigns the provided XxxxClass object value to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` object value
   * @returns this
   */
  public setXxxxFieldName(value: XxxxClass): this {
    assertIsDefined<XxxxClass>(value, `XxxxParentClassElement.xxxxFieldName is required`);
    const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided element is not an instance of XxxxClass.`;
    assertFhirType<XxxxClass>(value, XxxxClass, optErrMsg);
    this.xxxxFieldName = value;
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return isDefined<XxxxClass>(this.xxxxFieldName) && !this.xxxxFieldName.isEmpty();
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    if (this.hasXxxxFieldName()) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      setFhirBackboneElementJson(this.getXxxxFieldName()!, 'xxxxFieldName', jsonObj);
    } else {
      missingReqdProperties.push(`XxxxParentClassElement.xxxxFieldName`);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_DO_NOT_EXIST} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }

//endregion

//***** region BackboneElementType Array - Optional ********************************************************************

// =====================================================================
// BackboneElementType 0..*
// XxxxClass[] (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private xxxxFieldName?: XxxxClass[] | undefined;

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Value): XxxxClass | undefined {

    fieldName = 'xxxxFieldName';
    sourceField = `${source}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const componentJsonArray: JSON.Array = JSON.asArray(classJsonObj[fieldName]!, sourceField);
      componentJsonArray.forEach((componentJson: JSON.Value, idx) => {
        const component: XxxxClass | undefined = XxxxClass.parse(
          componentJson,
          `${sourceField}[${String(idx)}]`,
        );
        if (component !== undefined) {
          instance.addXxxxFieldName(component);
        }
      });
    }

  }

  /**
   * @returns the `xxxxFieldName` property value as a XxxxClass array
   */
  public getXxxxFieldName(): XxxxClass[] {
    return this.xxxxFieldName ?? ([] as XxxxClass[]);
  }

  /**
   * Assigns the provided XxxxClass array value to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` array value
   * @returns this
   */
  public setXxxxFieldName(value: XxxxClass[] | undefined): this {
    if (isDefinedList<XxxxClass>(value)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided value array has an element that is not an instance of XxxxClass.`;
      assertFhirTypeList<XxxxClass>(value, XxxxClass, optErrMsg);
      this.xxxxFieldName = value;
    } else {
      this.xxxxFieldName = undefined;
    }
    return this;
  }

  /**
   * Add the provided XxxxClass value to the `xxxxFieldName` array property.
   *
   * @param value - the `xxxxFieldName` value
   * @returns this
   */
  public addXxxxFieldName(value: XxxxClass | undefined): this {
    if (isDefined<XxxxClass>(value)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided element is not an instance of XxxxClass.`;
      assertFhirType<XxxxClass>(value, XxxxClass, optErrMsg);
      this.initXxxxFieldName();
      this.xxxxFieldName?.push(value);
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return isDefinedList<XxxxClass>(this.xxxxFieldName) && this.xxxxFieldName.some((item: XxxxClass) => !item.isEmpty());
  }

  /**
   * Initialize the `xxxxFieldName` property
   */
  private initXxxxFieldName(): void {
    if (!this.hasXxxxFieldName()) {
      this.xxxxFieldName = [] as XxxxClass[];
    }
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    if (this.hasXxxxFieldName()) {
      setFhirBackboneElementListJson(this.getXxxxFieldName(), 'xxxxFieldName', jsonObj);
    }

  }

//endregion

//***** region BackboneElementType Array - Required ********************************************************************

// =====================================================================
// BackboneElementType 1..*
// XxxxClass[] (xxxxFieldName / XxxxFieldName)
// XxxxParentClassElement (e.g., 'Group.characteristic')
// =====================================================================
  private xxxxFieldName: XxxxClass[] | null;

  constructor(xxxxFieldName: XxxxClass[] | null) {

    this.xxxxFieldName = null;
    if (isDefinedList<XxxxClass>(xxxxFieldName)) {
      this.setXxxxFieldName(xxxxFieldName);
    }
  }

  // *** NOTE ***
  // Only copy the internal code block!
  public static parse(sourceJson: JSON.Value): XxxxClass | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    fieldName = 'xxxxFieldName';
    sourceField = `${source}.${fieldName}`;
    if (fieldName in classJsonObj) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const componentJsonArray: JSON.Array = JSON.asArray(classJsonObj[fieldName]!, sourceField);
      componentJsonArray.forEach((componentJson: JSON.Value, idx) => {
        const component: XxxxClass | undefined = XxxxClass.parse(
          componentJson,
          `${sourceField}[${String(idx)}]`,
        );
        if (component === undefined) {
          missingReqdProperties.push(sourceField);
        } else {
          instance.addXxxxFieldName(component);
        }
      });
    } else {
      missingReqdProperties.push(sourceField);
    }

    // *** NOTE ***
    // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
    if (missingReqdProperties.length > 0) {
      const errMsg = `${REQUIRED_PROPERTIES_REQD_IN_JSON} ${missingReqdProperties.join(', ')}`;
      throw new FhirError(errMsg);
    }

  }


  /**
   * @returns the `xxxxFieldName` property value as a XxxxClass array
   */
  public getXxxxFieldName(): XxxxClass[] {
    return this.xxxxFieldName ?? ([] as XxxxClass[]);
  }

  /**
   * Assigns the provided XxxxClass array value to the `xxxxFieldName` property.
   *
   * @param value - the `xxxxFieldName` array value
   * @returns this
   */
  public setXxxxFieldName(value: XxxxClass[]): this {
    assertIsDefinedList<XxxxClass>(value, `XxxxParentClassElement.xxxxFieldName is required`);
    const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided value array has an element that is not an instance of XxxxClass.`;
    assertFhirTypeList<XxxxClass>(value, XxxxClass, optErrMsg);
    this.xxxxFieldName = value;
    return this;
  }

  /**
   * Add the provided XxxxClass value to the `xxxxFieldName` array property.
   *
   * @param value - the `xxxxFieldName` value
   * @returns this
   */
  public addXxxxFieldName(value: XxxxClass | undefined): this {
    if (isDefined<XxxxClass>(value)) {
      const optErrMsg = `Invalid XxxxParentClassElement.xxxxFieldName; Provided element is not an instance of XxxxClass.`;
      assertFhirType<XxxxClass>(value, XxxxClass, optErrMsg);
      this.initXxxxFieldName();
      this.xxxxFieldName?.push(value);
    }
    return this;
  }

  /**
   * @returns `true` if the `xxxxFieldName` property exists and has a value; `false` otherwise
   */
  public hasXxxxFieldName(): boolean {
    return isDefinedList<XxxxClass>(this.xxxxFieldName) && this.xxxxFieldName.some((item: XxxxClass) => !item.isEmpty());
  }

  /**
   * Initialize the `xxxxFieldName` property
   */
  private initXxxxFieldName(): void {
    if (!this.hasXxxxFieldName()) {
      this.xxxxFieldName = [] as XxxxClass[];
    }
  }

  // *** NOTE ***
  // Only copy the "if" block!
  public override toJSON(): JSON.Value | undefined {

    // *** NOTE ***
    // Add following near top of method ONLY IF it does not already exist
    const missingReqdProperties: string[] = [];

    if (this.hasXxxxFieldName()) {
      setFhirBackboneElementListJson(this.getXxxxFieldName(), 'xxxxFieldName', jsonObj);
    } else {
      missingReqdProperties.push(`XxxxParentClassElement.xxxxFieldName`);
    }

     // *** NOTE ***
     // Add following at bottom just above the `return instance;` ONLY IF it does not already exist
     if (missingReqdProperties.length > 0) {
       const errMsg = `${REQUIRED_PROPERTIES_DO_NOT_EXIST} ${missingReqdProperties.join(', ')}`;
       throw new FhirError(errMsg);
     }

  }

//endregion
